# Generated by Django 5.2.6 on 2025-09-07 00:11

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0003_populate_usercolorpreference_uuid'),
    ]

    operations = [
        migrations.CreateModel(
            name='SweatScoreWeights',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('zone', models.IntegerField(choices=[(0, 'Zone 0 - Below Zone 1'), (1, 'Zone 1 - Very Light'), (2, 'Zone 2 - Light'), (3, 'Zone 3 - Moderate'), (4, 'Zone 4 - Hard'), (5, 'Zone 5 - Maximum')], help_text='Heart rate zone number', unique=True)),
                ('name', models.CharField(help_text='Descriptive name for the zone', max_length=100)),
                ('perceived_effort', models.CharField(help_text='Perceived effort description', max_length=100)),
                ('weight', models.DecimalField(decimal_places=2, default=1.0, help_text='Points per minute for this zone', max_digits=5)),
            ],
            options={
                'verbose_name': 'Sweat Score Weight',
                'verbose_name_plural': 'Sweat Score Weights',
                'ordering': ['zone'],
            },
        ),
        migrations.AlterUniqueTogether(
            name='dailystep',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='dailystep',
            name='user',
        ),
        migrations.RemoveField(
            model_name='usercolorpreference',
            name='user',
        ),
        migrations.AddField(
            model_name='userprofile',
            name='blocking',
            field=models.ManyToManyField(blank=True, related_name='blockers', to='core.userprofile'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='following',
            field=models.ManyToManyField(blank=True, related_name='followers', to='core.userprofile'),
        ),
        migrations.AlterField(
            model_name='workout',
            name='activity_type',
            field=models.CharField(choices=[('lift', 'Weight Lifting'), ('cardio', 'Cardio')], help_text='Type of this workout.', max_length=10),
        ),
        migrations.AlterField(
            model_name='workout',
            name='calories',
            field=models.IntegerField(default=0, help_text='Calories burned in this workout.'),
        ),
        migrations.AlterField(
            model_name='workout',
            name='date',
            field=models.DateTimeField(default=django.utils.timezone.now, help_text='Date and time of this workout.'),
        ),
        migrations.AlterField(
            model_name='workout',
            name='reps',
            field=models.IntegerField(default=0, help_text='Number of repetitions.'),
        ),
        migrations.AlterField(
            model_name='workout',
            name='user',
            field=models.ForeignKey(help_text='The user who performed this workout.', on_delete=django.db.models.deletion.CASCADE, to='core.userprofile'),
        ),
        migrations.AlterField(
            model_name='workout',
            name='volume',
            field=models.DecimalField(decimal_places=2, default=0, help_text='Weight * reps.', max_digits=10),
        ),
        migrations.AlterField(
            model_name='workout',
            name='weight',
            field=models.DecimalField(decimal_places=2, default=0, help_text='Weight used in this workout.', max_digits=8),
        ),
        migrations.CreateModel(
            name='DailySteps',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calendar_date', models.DateField(default=django.utils.timezone.now)),
                ('total_steps', models.IntegerField(default=0)),
                ('total_distance', models.FloatField(default=0)),
                ('step_goal', models.IntegerField(default=10000)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_steps', to='core.userprofile')),
            ],
            options={
                'unique_together': {('user', 'calendar_date')},
            },
        ),
        migrations.CreateModel(
            name='Friendship',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique ID for this friendship.', primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('blocked', 'Blocked')], default='pending', help_text='Status of this friendship request.', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp of when the friendship request was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp of when the friendship status was last updated.')),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendship_requests_sent', to='core.userprofile')),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendship_requests_received', to='core.userprofile')),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('from_user', 'to_user')},
            },
        ),
        migrations.CreateModel(
            name='GarminActivity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('activity_id', models.BigIntegerField(help_text='Unique Garmin activity ID.', unique=True)),
                ('name', models.CharField(help_text='Name of the activity.', max_length=255)),
                ('activity_type', models.CharField(help_text='Type of activity (e.g., running, cycling).', max_length=100)),
                ('start_time_utc', models.DateTimeField(help_text='Start time of the activity in UTC.')),
                ('duration_seconds', models.FloatField(blank=True, help_text='Duration in seconds.', null=True)),
                ('distance_meters', models.FloatField(blank=True, help_text='Distance in meters.', null=True)),
                ('calories', models.FloatField(blank=True, help_text='Calories burned.', null=True)),
                ('average_hr', models.FloatField(blank=True, help_text='Average heart rate.', null=True)),
                ('max_hr', models.FloatField(blank=True, help_text='Maximum heart rate.', null=True)),
                ('raw_data', models.JSONField(blank=True, help_text='Raw JSON data from Garmin API.', null=True)),
                ('synced_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='garmin_activities', to='core.userprofile')),
            ],
            options={
                'ordering': ['-start_time_utc'],
            },
        ),
        migrations.CreateModel(
            name='GarminCredentials',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('garmin_email', models.EmailField(help_text="User's Garmin Connect email address.", max_length=254, unique=True)),
                ('session_data', models.JSONField(blank=True, help_text='Garmin Connect session/token data.', null=True)),
                ('last_sync', models.DateTimeField(blank=True, help_text='Timestamp of the last successful data sync.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='garmin_credentials', to='core.userprofile')),
            ],
            options={
                'verbose_name_plural': 'Garmin Credentials',
            },
        ),
        migrations.CreateModel(
            name='GarminDailySteps',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField(help_text='The date for which the steps were recorded.')),
                ('steps', models.PositiveIntegerField(help_text='Total steps recorded for the day.')),
                ('synced_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='garmin_daily_steps', to='core.userprofile')),
            ],
            options={
                'verbose_name_plural': 'Garmin Daily Steps',
                'ordering': ['-date'],
                'unique_together': {('user', 'date')},
            },
        ),
        migrations.DeleteModel(
            name='Activity',
        ),
        migrations.DeleteModel(
            name='DailyStep',
        ),
        migrations.DeleteModel(
            name='UserColorPreference',
        ),
    ]
