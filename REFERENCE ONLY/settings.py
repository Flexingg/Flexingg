"""
Django settings for flexingg project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import sys
import logging
import boto3


# Enable debug logging for boto3
logging.getLogger('boto3').setLevel(logging.DEBUG)
logging.getLogger('botocore').setLevel(logging.DEBUG)

# For Digital Ocean Deployment, do not delete.
# import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
load_dotenv()


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'U-should-rly-change-this-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

# Authentication settings
LOGIN_URL = '/accounts/'
LOGIN_REDIRECT_URL = '/'

ALLOWED_HOSTS = os.getenv('DJANGO_ALLOWED_HOSTS', 'flexin.gg').split(',')


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.admindocs",
    'django.contrib.auth',
    # 'django_quill',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'common.apps.CommonConfig',  # Add common app
    # 'base.apps.BaseConfig',
    # 'food.apps.FoodConfig',
    # 'fitness.apps.FitnessConfig',
    # 'gamification.apps.GamificationConfig',  # New gamification app
    # 'setup_wizard.apps.SetupWizardConfig',  # Setup Wizard app
    'social',
    'social.apps.SocialConfig',
    'sass_processor',
    'django_cotton',
    'django_components',
    'django_htmx',
    'pwa',
    'dbbackup',  # django-dbbackup
    'django_celery_beat',
    'django_celery_results',
]


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.admindocs.middleware.XViewMiddleware',
    'django_htmx.middleware.HtmxMiddleware',
    # Add last page tracking
    'base.middleware.LastPageMiddleware',
]

ROOT_URLCONF = 'flexingg.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'base/components'),
            os.path.join(BASE_DIR, 'food/components'),
            os.path.join(BASE_DIR, 'fitness/components'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.template.context_processors.static',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'base.context_processors.navigation',
            ],
            'libraries': {
                'filters': 'base.templatetags.filters',
            },
            'loaders': [
                'django.template.loaders.filesystem.Loader',
                'django.template.loaders.app_directories.Loader',
                'django_components.template_loader.Loader',
            ] if DEBUG else [
                ('django.template.loaders.cached.Loader', [
                    'django.template.loaders.filesystem.Loader',
                    'django.template.loaders.app_directories.Loader',
                    'django_components.template_loader.Loader',
                ]),
            ],
            'builtins': [
                'django_components.templatetags.component_tags',
            ],
        },
    },
]


WSGI_APPLICATION = 'flexingg.wsgi.application'
CSRF_TRUSTED_ORIGINS = ["https://" + sub for sub in os.getenv('DJANGO_ALLOWED_HOSTS', '').split(',')]

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases


if DEBUG is True:
    DATABASES = {
        "default": {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_NAME', 'flexingg_postgres'),
            'USER': os.getenv('DB_USER', 'flexingg_user'),
            'PASSWORD': os.getenv('DB_PW', 'This_is_@_super_secure_password_101'),
            'HOST': os.getenv('DB_HOST', '127.0.0.1'),
            'PORT': os.getenv('DB_PORT', '5432'),
        }
    }
else:
    DATABASES = {
        "default": {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_NAME', 'flexingg_postgres'),
            'USER': os.getenv('DB_USER', 'flexingg_user'),
            'PASSWORD': os.getenv('DB_PW', 'This_is_@_super_secure_password_101'),
            'HOST': os.getenv('DB_HOST', '127.0.0.1'),
            'PORT': os.getenv('DB_PORT', '5432'),
        }
    }

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    # Commented out Django's CommonPasswordValidator to use our custom validation
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True
TIME_ZONE = 'America/New_York'


# Static and Media Files Configuration
# STATIC_URL = '/static/'
# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'),]

# MEDIA_URL = os.path.join(BASE_DIR, 'media/')
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# AWS Settings
AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
AWS_S3_ENDPOINT_URL = os.getenv('AWS_S3_ENDPOINT_URL')
AWS_CUSTOM_DOMAIN = os.getenv('AWS_CUSTOM_DOMAIN')

# Static files configuration
STATIC_URL = f'https://{AWS_CUSTOM_DOMAIN}/static/'
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3StaticStorage'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Additional locations of static files
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Ensure Django-Quill static files are collected
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
] 

# AWS S3/R2 configuration
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}

AWS_QUERYSTRING_AUTH = False
AWS_S3_FILE_OVERWRITE = True
AWS_DEFAULT_ACL = 'public-read'
AWS_S3_VERIFY = True
AWS_S3_ADDRESSING_STYLE = "path"  # Changed to path style for R2

# Configure CORS for R2
AWS_S3_CORS_RULES = [
    {
        'AllowedOrigins': ['*'],
        'AllowedMethods': ['GET'],
        'AllowedHeaders': ['*'],
        'MaxAgeSeconds': 3000,
    },
] if DEBUG else []

# Media files configuration
MEDIA_URL = f'https://{AWS_CUSTOM_DOMAIN}/media/'
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# Storage configuration
STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
        "OPTIONS": {
            'bucket_name': AWS_STORAGE_BUCKET_NAME,
            'default_acl': 'public-read',
            'endpoint_url': AWS_S3_ENDPOINT_URL,
            'signature_version': 's3v4',
            'location': 'media',
            'addressing_style': 'path',  # Added for R2
        },
    },
    "staticfiles": {
        "BACKEND": "storages.backends.s3boto3.S3StaticStorage",
        "OPTIONS": {
            'bucket_name': AWS_STORAGE_BUCKET_NAME,
            'default_acl': 'public-read',
            'endpoint_url': AWS_S3_ENDPOINT_URL,
            'signature_version': 's3v4',
            'location': 'static',
            'addressing_style': 'path',  # Added for R2
        },
    },
}


# Django DB Backup settings
if DEBUG: 
    DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
    DBBACKUP_STORAGE_OPTIONS = {'location': BASE_DIR / 'backups'}
    # Create backups directory if it doesn't exist
    os.makedirs(BASE_DIR / 'backups', exist_ok=True)
else: 
    DBBACKUP_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
    DBBACKUP_STORAGE_OPTIONS = {
        'access_key': AWS_ACCESS_KEY_ID,
        'secret_key': AWS_SECRET_ACCESS_KEY,
        'bucket_name': AWS_STORAGE_BUCKET_NAME,
        'default_acl': 'private',
        'location': 'backups'
    }    
    

# Favicon settings
FAVICON_PATH = os.path.join(STATIC_URL, 'app/icons/favicon.ico')

# Component settings
COMPONENTS = {
    "dirs": [
        os.path.join(BASE_DIR, "base/components"),
        os.path.join(BASE_DIR, "food/components"),
        os.path.join(BASE_DIR, "fitness/components"),
    ],
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Documentation
DOCS_ROOT = os.path.join(BASE_DIR, 'docs/_build/html')
DOCS_ACCESS = 'public'

# Add PWA configuration
PWA_APP_NAME = 'Flexin.gg'
PWA_APP_DESCRIPTION = "Gamify your fitness journey with competitions and rewards."
PWA_APP_THEME_COLOR = '#000000'
PWA_APP_BACKGROUND_COLOR = '#ffffff'
PWA_APP_DISPLAY = 'standalone'
PWA_APP_SCOPE = '/'
PWA_APP_ORIENTATION = 'any'
PWA_APP_START_URL = '/'
PWA_APP_STATUS_BAR_COLOR = 'default'
PWA_APP_ICONS = [
    {
        'src': '/static/app/icons/icon.png',
        'sizes': '512x512'
    }
]
PWA_APP_ICONS_APPLE = [
    {
        'src': '/static/app/icons/icon.png',
        'sizes': '512x512'
    }
]
PWA_APP_SPLASH_SCREEN = [
    {
        'src': '/static/app/icons/splash.png',
    }
] if DEBUG else []
PWA_APP_DIR = 'ltr'
PWA_APP_LANG = 'en-US'

DATA_UPLOAD_MAX_NUMBER_FIELDS = 10000

QUILL_CONFIGS = {
    'default': {
        'theme': 'snow',
        'modules': {
            'history': {
                'delay': 1000,
                'maxStack': 100,
                'userOnly': True,
            },
            'toolbar': [
                [{'header': [1, 2, 3, 4, 5, 6, False]}],
                ['bold', 'italic', 'underline', 'strike'],
                ['blockquote', 'code-block'],
                [{'list': 'ordered'}, {'list': 'bullet'}],
                [{'script': 'sub'}, {'script': 'super'}],
                [{'indent': '-1'}, {'indent': '+1'}],
                [{'direction': 'rtl'}],
                [{'color': []}, {'background': []}],
                ['clean'],
                ['link']
            ],
        }
    }
}


SIMPLEFIN_BASE_URL = "https://bridge.simplefin.org/simplefin"  # or your SimpleFIN server URL 

# Django AllAuth Configuration
# AUTHENTICATION_BACKENDS = [
#     'django.contrib.auth.backends.ModelBackend',
#     'allauth.account.auth_backends.AuthenticationBackend',
# ]

# SITE_ID = 1

# AllAuth Configuration
# ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
# ACCOUNT_EMAIL_REQUIRED = True
# ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
# ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True
# ACCOUNT_USERNAME_MIN_LENGTH = 4
ACCOUNT_LOGOUT_REDIRECT_URL = '/'

# # Provider specific settings
# SOCIALACCOUNT_PROVIDERS = {
#     'google': {
#         'SCOPE': [
#             'profile',
#             'email',
#         ],
#         'AUTH_PARAMS': {
#             'access_type': 'online',
#         },
#     },
# } 

# Force Django to use the new R2 domain for static files
AWS_S3_CUSTOM_DOMAIN = 'r2.flexin.gg'
STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/static/'
MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'

# Ensure static files are handled correctly
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3StaticStorage'
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# Additional static files settings
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
] 

# Celery Configuration
CELERY_BROKER_URL = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'America/New_York'  # EST/EDT

# Celery Beat Configuration
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers.DatabaseScheduler'

# Email configuration for admin notifications
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = os.getenv('EMAIL_HOST', 'localhost')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 25))
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'False').lower() == 'true'
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'webmaster@localhost')
SERVER_EMAIL = os.getenv('SERVER_EMAIL', 'root@localhost')

# Redis Configuration
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': os.getenv('REDIS_URL', 'redis://localhost:6379/1'),
    },
}

# Session Configuration
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Use database sessions instead of cache
SESSION_COOKIE_AGE = 86400  # 24 hours
SESSION_SAVE_EVERY_REQUEST = False
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
